title:: FluidNMFStretch
summary:: NMF Diffusion of Time Stretched Source Over N-Channel VBAP System
related:: TimeStretch, Classes/FluidBufNMF, Classes/FluidKMeans, Classes/FluidBufMFCC, Classes/VBAP, Classes/VBAPSpeakerArray
categories::  UGens>FFT

Description::
Takes a mono or stereo audio file, uses FluidBufNMF to split the file into N*2 components, time stretches (optional) those componenents using the TimeStretch class, analyses those components over time using FluidBufMFCC, clumps those components over time using FluidKMeans and finally diffuses those N*2 components over an M-channel speaker system using VBAP.

WARNING: Requires the FluCoMa library, developed at the University of Huddersfield, the TimeStretch library, developed by Sam Pluta, Alex Ness, and Jem Altieri, and the VBAP library, implemented by Scott Wilson.

classmethods::


method::new

argument::server

The server to be used. If the server is not booted, it will boot on init.

argument::fileIn

Path to the source stereo file for manipulation.

argument::writeDir

Path to the Directory where all files will be written. Default will be the folder where fileIn is located plus "Main/"


method::nmf

Takes the N channels of the input file and expands each channel out to M NMF components. The method creates a directory inside the writeDir, with separate folders for each channel of the original file.

argument::components

The number of channels to expand each channel of the stereo file to

argument::action

A function to be evaluated on completion.


method::stretch

This is optional, but recommended for good times. Takes each NMF component and time stretches that component using the TimeStretch algorithm. nmf needs to have already happened.

argument::durMult

How many times longer will the resulting file be. This uses the Ness Stretch, an expanded Paul Stretch, so I recommend 10, 100, or more times stretch. See the TimeStretch help file for more details.

argument::stretchDestFolder

The destination folder for the stretched files. The files will be organized by channel, just like the NMF files above

argument::fftMax

The largest FFT buffer size, for the lowest frequency data.

argument:overlaps

The default is 2, but 4 is also an option. 4 uses the default IFFT window. 2 uses the custom window defined by the PaulStretch algorithm.

If given a 2 or 4, all of the FFT bands will use the same overlap. However, if the user gives an array of values, like [2,2,2,2,2,3,3,4,4], each band will have its own overlap setting.

argument::numSplits

	By default, the algorithm will split audio data into 9 frequency "octaves", starting with the first octave below 22050, then subsequent octaves down from there, leaving everything below 86hz to the largest buffer. However, some material, like classical orchestral music, gets swimmy above a certain register (or the swimminess that is welcome in pop becomes unwelcome). Here you can set the split to 8 or lower. Setting the number to 7, for instance, leaves us with a top FFT dealing with the frequency range above 2756 with a bin size of 1024 rather the audio range above 11025 with a bin size of 256, which is the default.


method:getMFCCChannel

Produces an MFCC analysis of each NMF component channel. Produces an "mfcc" directory, with a subdirectory corresponding to the chunkLength argument. Inside this directory will be folders corresponding to each channel of the original file. Inside each folder will be json files corresponding to each NMF file created above.

argument::chanNum

The channel number of the analysis to perform.

argument::chunkLength

The amount of audio to analyze per MFCC. Smaller numbers will correspond to faster panning in the resulting algorithm. Larger numbers will correspond to slower panning. (On a 44100 sr file and a 44100 chunkLength, the pan points will be 1 second apart in the original file. If we stretch to 100x, the pan points will be 100 seconds apart).

argument::counterStart

If the analysis is interrupted at any point, it will have already saved the corresponding json files, so you can start on any file number. By default this is 0.


method::loadFileDataSets

The mfcc analysis only needs to happen once. After this, the files can be loaded with loadFileDataSets.

argument::chunkLength

The directory that is loaded is named after the chunkLength of the MFCC analysis, so this needs to be provided.


method::saveFrameDataSetsFromFileChannel

The MFCC analysis is in a format of corresponding to one per NMF file, but we need the format to be in frames (1 file per vertical frame across all of the NMF files), so that channels can be panned in similar groups. Thus, the data needs to be rotated into frame format.

This really should happen one channel at a time, and depending on the size of the original file and the chunkLength, you may need to reboot the server between each sorting. This may be dealing with very large datasets.

In each analysis folder, this will add

argument::chanNum

The channel number of the analysis to perform.

argument::chunkLength

The directory that is loaded is named after the chunkLength of the MFCC analysis, so this needs to be provided.


method::loadFrameDataSetsChan

Once the data frames have been created, they can be loaded from the json files.

argument::chunkLength

The directory that is loaded is named after the chunkLength of the MFCC analysis, so this needs to be provided.

method::createClusterChan

Uses KMeans on the FrameDataSetsChan to clump each frame of the MFCC analysis into N clusters, which will be panned together.

argument::chanNum

The channel number of the analysis to perform.

argument::numClusters

The number of clusters to the extracted.

method::saveClusterChan

argument::chanNum

The channel number of the analysis to perform.

argument::fileName

The name of the file to be saved into the Main directory

method::setStretchFolder

Sets the stretch folder to be used in the Panning algorithm

argument::folderName

The name of the folder. Should contain additional folders per each channel, each with all of the stretched files inside.


method::makePanner

Creates the VBAP panning system used to pan the sound files

argument::vbapSpeakerArray

The VBAPSpeakerArray used in the panning

argument::vbapPanPointsIn

The destination VBAPPanPoints for the panning algorithm. This provides the

Examples::

Will start an NRT server, load the file, and execute the time stretch. Each instance of this will run on its own server, so you can run as many simultaneously as your computer can handle.

code::

//The new sound file will go into the default recordings directory in SC
TimeStretch.stretchNRT(Platform.resourceDir +/+ "sounds/a11wlk01.wav", Platform.recordingsDir +/+ "a11wlk01_10.wav", 10);

//If the above throws an error, you may need to increase the default Server memory allocation when using multiple FFT layers. If so, run the following before running the above line of code
Server.local.options.memSize = 16384;

//One can also give different overlap settings per stretch band
TimeStretch.stretchNRT(Platform.resourceDir +/+ "sounds/a11wlk01.wav", Platform.recordingsDir +/+ "a11wlk01_10B.wav", 10, 65536, [2,2,2,2,2,3,3,4,4]);

::

Using the numSplits argument:

code::

//the NRT version will work with mono, stereo, or even N channel files

TimeStretch.stretchNRT(Platform.resourceDir +/+ "sounds/a11wlk01.wav", Platform.recordingsDir +/+ "a11wlk01_10d.wav", 10, numSplits:4);
::

A real-time version, with 1 FFT layer (which is basically a PaulStretch algorithm). This will only work on mono files.

code::
s.boot;

b = Buffer.read(s, Platform.resourceDir +/+ "sounds/a11wlk01.wav");

TimeStretch.stretchRT1(s, b, 0, 0, 100, 2, 0.5, 32768/4);  //must be a mono file
TimeStretch.stop
::

A real-time version with many FFT Layers (likely to overload the CPU):

code::
s.options.memSize = 16384; s.reboot;
b = Buffer.read(s, Platform.resourceDir +/+ "sounds/a11wlk01.wav");
TimeStretch.stretchRT(s, b, 0, 0, 100, 4, 0.5, 32768/2, 4); //must be a mono file
::
